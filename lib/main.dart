import 'dart:convert';

import 'package:collection/collection.dart';
import 'package:desktop_multi_window/desktop_multi_window.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:iptv_player/provider/isar/isar_provider.dart';
import 'package:iptv_player/provider/isar/m3u_provider.dart';
import 'package:iptv_player/router/router.dart';
import 'package:iptv_player/service/collections/all_schemas.dart';
import 'package:iptv_player/service/m3u_service.dart';
import 'package:isar/isar.dart';
import 'package:macos_ui/macos_ui.dart';
import 'package:path_provider/path_provider.dart';

Future<void> main(List<String> args) async {
  WidgetsFlutterBinding.ensureInitialized();
  final dir = kIsWeb ? null : (await getApplicationSupportDirectory()).path;
  final isar = await Isar.open(allSchemas, directory: dir);

  if (args.firstOrNull == 'multi_window') {
    final windowId = int.parse(args[1]);
    final arguments = args[2].isEmpty
        ? const {}
        : jsonDecode(args[2]) as Map<String, dynamic>;
    runApp(
      ProviderScope(
        child: AboutWindow(
          windowController: WindowController.fromWindowId(windowId),
          args: arguments,
        ),
      ),
    );
  } else {
    runApp(
      ProviderScope(
        child: App(
          isar: isar,
        ),
      ),
    );
  }
}

class App extends ConsumerStatefulWidget {
  const App({required this.isar, super.key});

  final Isar isar;

  @override
  ConsumerState<App> createState() => _AppState();
}

class _AppState extends ConsumerState<App> {
  @override
  void initState() {
    super.initState();
    ref.read(getIsarProvider).init(widget.isar);
  }

  @override
  Widget build(BuildContext context) {
    return MacosApp.router(
      routerConfig: router,
      title: 'iptv_player',
      theme: MacosThemeData.light(),
      darkTheme: MacosThemeData.dark(),
      themeMode: ThemeMode.system,
      debugShowCheckedModeBanner: false,
    );
  }
}

class AboutWindow extends ConsumerWidget {
  const AboutWindow({
    super.key,
    required this.windowController,
    required this.args,
  });

  final WindowController windowController;
  final Map? args;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return MacosApp(
      title: 'iptv_player',
      theme: MacosThemeData.light(),
      darkTheme: MacosThemeData.dark(),
      themeMode: ThemeMode.system,
      home: MacosWindow(
        child: MacosScaffold(
          children: [
            ContentArea(
              builder: (context, scrollController) {
                return Center(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'About iptv_player',
                        style: MacosTheme.of(context).typography.largeTitle,
                      ),
                      const SizedBox(height: 8.0),
                      const Text(
                        'This is a starter application generated by mason_cli.',
                      ),
                      MacosIconButton(
                        icon:
                            const Icon(CupertinoIcons.arrow_right_circle_fill),
                        backgroundColor: Colors.amber,
                        onPressed: () async {},
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MainView extends ConsumerStatefulWidget {
  const MainView({super.key});

  @override
  ConsumerState<MainView> createState() => _MainViewState();
}

class _MainViewState extends ConsumerState<MainView> {
  int _pageIndex = 0;

  @override
  void initState() {
    super.initState();

    asyncCalls();
  }

  Future<void> asyncCalls() async {
    final M3uService m3uService = ref.read(m3uServiceProvider);
    await m3uService.deleteAll();
    await ref
        .read(m3uParseServiceProvider)
        .downloadAndPersist(m3uService.getActiveIptvServer()!);
  }

  @override
  Widget build(BuildContext context) {
    return PlatformMenuBar(
      menus: [
        PlatformMenu(
          label: 'IptvPlayer',
          menus: [
            PlatformMenuItem(
              label: 'About',
              onSelected: () async {
                final window = await DesktopMultiWindow.createWindow(jsonEncode(
                  {
                    'args1': 'About iptv_player',
                    'args2': 500,
                    'args3': true,
                  },
                ));
                debugPrint('$window');
                window
                  ..setFrame(const Offset(0, 0) & const Size(350, 350))
                  ..center()
                  ..setTitle('About iptv_player')
                  ..show();
              },
            ),
            const PlatformProvidedMenuItem(
              type: PlatformProvidedMenuItemType.quit,
            ),
          ],
        ),
      ],
      child: MacosWindow(
        sidebar: Sidebar(
          minWidth: 200,
          builder: (context, scrollController) {
            return SidebarItems(
              currentIndex: _pageIndex,
              onChanged: (index) {
                setState(() => _pageIndex = index);
              },
              items: const [
                SidebarItem(
                  leading: MacosIcon(CupertinoIcons.home),
                  label: Text('Home'),
                ),
                SidebarItem(
                  leading: MacosIcon(CupertinoIcons.search),
                  label: Text('Groups'),
                ),
                SidebarItem(
                  leading: MacosIcon(CupertinoIcons.search),
                  label: Text('Series'),
                  //Filter by /series/ im Link
                ),
                SidebarItem(
                  leading: MacosIcon(CupertinoIcons.search),
                  label: Text('Movies'),
                  //Filter by /movie/ im Link
                ),
              ],
            );
          },
        ),
        child: IndexedStack(
          index: _pageIndex,
          children: const [
            HomePage(),
            Center(
              child: Text('Home'),
            ),
          ],
        ),
      ),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Builder(
      builder: (context) {
        return MacosScaffold(
          toolBar: ToolBar(
            title: const Text('Home'),
            actions: [
              ToolBarIconButton(
                label: 'Toggle Sidebar',
                icon: const MacosIcon(CupertinoIcons.sidebar_left),
                showLabel: false,
                tooltipMessage: 'Toggle Sidebar',
                onPressed: () {
                  MacosWindowScope.of(context).toggleSidebar();
                },
              )
            ],
          ),
          children: [
            ContentArea(
              builder: (context, scrollController) {
                return const Center(
                  child: Text('Home'),
                );
              },
            ),
          ],
        );
      },
    );
  }
}
